内存管理的接口声明于pm.h和vm.h头文件中(均放置于kernel/include目录中)，其中pm.h声明物理内存管理接口，vm.h声明虚拟内存管理接口。


一、物理内存管理(声明于pm.h)

1、void* alloc_physical_page();
功能：分配一个空闲的物理页面，返回其物理地址。
备注：如果没有物理页面可供分配，则返回NULL。

2、void free_physical_page(void* pa);
功能：释放一个物理页面，将其加入空闲页面链表。
参数：pa，类型：void*，说明：需要释放的物理页面的首地址。
备注：如果pa没有页对齐、或不在物理页面的可用地址范围内，将会panic。

注：空闲物理页面的组织管理方式于xv6完全一致，不再赘述。


二、虚拟内存管理(声明于vm.h)

1、void user_vm_map(pagetable_t pd, uint64 va, uint64 pa, uint64 sz, int permission);
功能：在指定的用户页表中将一段连续的虚拟地址映射到连续的物理地址。
参数：pd，类型：pagetable_t，说明：指定的用户页表。
参数：va，类型：uint64，说明：要映射的起始的虚拟地址。
参数：pa，类型：uint64，说明：要映射的起始的物理地址。
参数：sz，类型：uint64，说明：映射地址的大小。
参数：permission，类型：uint64，说明：pte的属性。
备注：该函数即是在指定的用户页表中将[va , va+sz)的虚拟地址区间映射到[pa，pa+sz)的物理地址区间，va、pa均会被页对齐。如果映射中出现错误则会panic。另有kernel_vm_map函数，功能与其一致，只不过仅仅针对内核页表。

2、void user_vm_unmap(pagetable_t pd, uint64 va, uint64 sz, int is_free_pa);
功能：在指定的用户页表中将一段连续的虚拟地址与其物理地址解除映射关系。
参数：pd，类型：pagetable_t，说明：指定的用户页表。
参数：va，类型：uint64，说明：要解除映射的起始的虚拟地址。
参数：sz，类型：uint64，说明：连续地址的大小。
参数：is_free_pa，类型：int，说明：是否释放物理内存，0为不释放，否则为释放。
备注：该函数即是在用户页表中将[va , va+sz)的虚拟地址区间解除与其对应的物理地址的映射关系，va会被页对齐。如果解除映射过程中出现错误则会panic。

3、int pte_permission(int is_read, int is_write, int is_exec, int is_user); 
功能：返回生成的pte的属性，这个属性一般用于user_vm_map中的permission参数。
参数is_read为1(不为0)是可读。
参数is_write为1(不为0)是可写。
参数is_exec为1(不为0)是可执行。
参数is_user为1(不为0)表示用户进程使用。
返回值：返回生成的pte的属性。
备注：该函数目前基本只用于生成user_vm_map中的permission参数。

4、void *va_to_pa(pagetable_t pd, void *va);
功能：根据页表和虚拟地址获得相应的物理地址。
参数：pd，类型：pagetable_t，说明：指定的用户页表。
参数：va，类型：void*，说明：待转换的虚拟地址。
返回值：返回虚拟地址va在页表pd中对应的物理地址。
备注：如果没有找到物理地址，则返回NULL。

5、uint64 find_pa_align_pgsize(pagetable_t pd, uint64 va);
功能：根据虚拟地址va和指定页表找到其对应物理页的物理首地址pa。
参数：pd，类型：pagetable_t，说明：指定的用户页表。
参数：va，类型：uint64，说明：指定的虚拟地址。
返回值：与va对应的物理页的物理首地址。
备注：返回的地址一定是页对齐的；如果没有找到，则返回0。

6、void free_pagetable(pagetable_t pagetable);
功能：释放一个空页表占用的内存空间。
参数：pagetable，类型：pagetable_t，说明：待释放的页表。
备注：该函数使用的条件非常严格，被释放的页表一定要保证其没有一个pte是有效的，否则将会panic。

7、void free_pagetable2(pagetable_t pagetable, uint64 sz, int is_free)；
功能：解除页表中虚拟地址从0到size的映射关系，并不释放页表。
参数：pagetable，类型：pagetable_t，说明：指定的页表。
参数：sz，类型：uint64，说明：页表解除映射关系的范围(0-sz)。
参数：is_free，类型：int，说明：如果is_free不为0，则将pte指向的有效物理内存也一并释放。
备注：该函数仅解除页表映射关系、释放pte对应的物理内存，页表占用的内存空间并不释放。查看定义可发现该函数实际上仅仅是user_vm_unmap的一个简单封装。

注：在内核地址空间中，除trampoline段代码的地址空间外，其余地址空间的虚拟地址与物理地址均一致。所有的可用内存在内核初始化阶段均已完成映射，因此进入内核态后可以直接使用其物理地址。

用户进程内存布局：
User memory layout.
	Address zero first:（起始虚拟地址为0，地址向下依次递增）
	text（代码段）
	original data and bss（全局数据段）
	expandable heap（堆段）
	unalloced（未分配的地址空间，可用于堆段的动态增长）
	fixed-size stack（栈段，大小固定为一页）
	TRAPFRAME (p->trapframe, used by the trampoline)（TRAPFRAME段，分配一页，用于进入内核态时保存进程现场）
	TRAMPOLINE (the same page as in the kernel)（TRAMPOLINE段，即用户态和内核态间的跳板代码，分配一页，被映射在最高地址处）

其中代码段和全局数据段由elf文件中读入，其余段由系统分配。

